--- folder_comparator_v26.00.py Part 01/12
import os
import sys
import hashlib
import argparse
import fnmatch
import re
import time
import datetime
import textwrap # For better help formatting
import math
from typing import Optional


# --- Script Description ---
#
SCRIPT_VERSION = "v26.00"
SCRIPT_DATE    = "16-July-2025"
#
# A. Gehri/Gemini
#
# This script compares two folders (source and target) to identify and report
# on items based on their existence, modification dates, and size.
#
# It provides a detailed report on the following exclusive categories:
#  1. Broken symbolic links found in the source folder.
#  2. Broken symbolic links found in the target folder.
#  3. Files existing only in the source folder.
#  4. Files existing only in the target folder.
#  5. Files existing in both source and target that are considered IDENTICAL.
#     - Identical means: (a) sizes are identical AND (b) timestamps are within
#       a user-defined time tolerance.
#     - An optional hash check (--hash-check) can be enabled for stricteri
#       identity verification, in which case files are identical ONLY if
#       their content hashes match (along with size).
#  6. Files existing in both source and target, which are DIFFERENT, andi
#     source is newer.
#  7. Files existing in both source and target, which are DIFFERENT, and
#     target is newer.
#  8. Files/Folders excluded based on --exclude patterns
#  9. Items that have different types (File/Folder) in Source an Target
# 10. Items for which an error has occurred during comparison
#
# The report includes the count and total size for each file category.
# Users can specify patterns to exclude certain files or folders from the
# comparison, either directly via command-line arguments or by providing a
# file containing the patterns.
#
# Usage examples:
# ---------------
# python3 folder_comparator.py --exclude "*.log", "toto/activate*", "temp_dir/" -- source_dir target_dir
# python3 folder_comparator.py --exclude-file my_exclusions.txt --time-tolerance 0.1 -hash-check md5 -- source_dir target_dir
#
# Note on timestamps (modification time):
# ---------------------------------------
# Sometimes, when manipulating files, the modification timestamp may be rounded
# to the nearest second, in which case the use of --time-tolerance 1 should
# indicate that such files should be treated as identical.
#
# Note on the logic for size calculation:
# ---------------------------------------
# For reporting and comparison purposes, item sizes are handled as follows:
#   - Regular Files: Their actual byte size is used.
#   - Directories: Have no meaningful "content size" in bytes.
#                  Their size is recorded as 'None' during scanning and
#                  displayed as 'None bytes' in the report.
#                  They are not included in total size sums.
#   - Symbolic Links: The size recorded is the actual size of the symlink
#                     entry itself (i.e., the byte length of the target
#                     path string it contains), not the size of its target.
#                     This size is a numerical value, displayed as 'XX bytes',
#                     and included in total size sums where applicable.
#   - Broken symlinks are reported separately and do not have a size
#     associated for comparison.
# This approach ensures clear distinction between actual file content size,
# the conceptual 'size' of directories, and the true footprint of symlinks.

#
# --- End of Script Description ---


# --- Constants for Comparison Outcomes and Report Categories ---
# These are the 10 definitive report categories
# The titles of the categories reported in the final report are defined in the print_report function
REPORT_BROKEN_SYMLINK_SOURCE = "Broken Symbolic Links found in Source."
REPORT_BROKEN_SYMLINK_TARGET = "Broken Symbolic Links found in Target."
REPORT_ONLY_IN_SOURCE = "Files existing ONLY in Source."
REPORT_ONLY_IN_TARGET = "Files existing ONLY in Target."
REPORT_IDENTICAL = "Files in Source AND Target that are IDENTICAL" # The detailed explanation will be built dynamically in print_report
REPORT_DIFFERENT_CONTENT_SOURCE_NEWER = "Files in Source AND Target that are DIFFERENT, and SOURCE is newer."
REPORT_DIFFERENT_CONTENT_TARGET_NEWER = "Files in Source AND Target that are DIFFERENT, and TARGET is newer."
REPORT_EXCLUDED = "Excluded Files/Folders (based on --exclude patterns)."
REPORT_DIFFERENT_TYPE = "Items with Different Type (File vs. Folder) found in both Source and Target."
REPORT_COMPARE_ERROR = "Comparison Errors."

# --- Global variables for optimization and debugging ---
compiled_file_patterns_global = []
compiled_dir_patterns_global = []
compiled_root_specific_file_patterns_global = []
compiled_root_specific_dir_patterns_global = []
patterns_compiled_flag = False
DEBUG_EXCLUDE_ENABLED = False
DEBUG_TARGET_PATTERNS = [] # Populated from args

# --- Gloabl variables related to the exclusions patterns
all_exclude_patterns = []
num_patterns_from_exclude_file = 0

# --- Global variables for cleaned paths (set in main)
source_folder_cleaned = ""
target_folder_cleaned = ""

# --- Unified Data Structure for Comparison Items ---
class ComparisonItem:
    """
    Represents a single item (file or directory) from either source or target,
    along with all relevant comparison attributes. This unifies the data structure
    for all categories.
    """
    def __init__(self, relative_path: str):
        self.relative_path = relative_path
        self.is_dir_source: bool = False
        self.size_source: int or None = None
        self.mtime_ns_source: int or None = None
        self.hash_source: str or None = None
        self.symlink_target_source: str or None = None # Target path for source symlink
        self.is_broken_symlink_source: bool = False

        self.is_dir_target: bool = False
        self.size_target: int or None = None
        self.mtime_ns_target: int or None = None
        self.hash_target: str or None = None
        self.symlink_target_target: str or None = None # Target path for target symlink
        self.is_broken_symlink_target: bool = False

        self.is_excluded_source: bool = False # New: True if excluded from source processing
        self.is_excluded_target: bool = False # New: True if excluded from target processing
        self.exclusion_matched_pattern: str or None = None # Pattern that caused exclusion
        self.type_mismatch_description: str or None = None # For REPORT_DIFFERENT_TYPE
        self.comparison_error_message: str or None = None # For REPORT_COMPARE_ERROR

# --- Core Utility Functions ---

